<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXByExample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <!-- 根据本地环境配置 -->
    <context id="context" targetRuntime="MyBatis3">

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 注释 -->
        <!--<commentGenerator type="xiaolong.lou.plugin.MGBCommentGenerator">-->
            <!--<property name="suppressAllComments" value="false"/>&lt;!&ndash; 是否取消注释 &ndash;&gt;-->
            <!--<property name="suppressDate" value="true"/> &lt;!&ndash; 是否取消生成注释代时间戳 &ndash;&gt;-->
        <!--</commentGenerator>-->

        <!-- 此处需要修改数据库配置 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://172.24.7.29:3306/xjd_jintiao_01?characterEncoding=UTF8"
                        userId="root" password="JRTESTbai!@#123"/>
        <!-- model -->
        <!-- java模型创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="com.ctrip.asp.commom.dao.auto.model"
                            targetProject="../DeMarcia-common/src/main/java">
        </javaModelGenerator>

        <!-- mapper xml config -->
        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
         -->
        <sqlMapGenerator targetPackage="com.ctrip.asp.commom.dao.auto.mapper"
                         targetProject="../DeMarcia-common/src/main/java">
        </sqlMapGenerator>

        <!-- mapper java interface -->
        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.ctrip.asp.commom.dao.auto.client"
                             targetProject="../DeMarcia-common/src/main/java" type="XMLMAPPER">
        </javaClientGenerator>

        <!-- 此处填写需要自动生成的表名 -->
        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->

        <!--<table tableName="hotel_merchant_relation">
            &lt;!&ndash; 参考 javaModelGenerator 的 constructorBased属性&ndash;&gt;
            <property name="constructorBased" value="false"/>
            &lt;!&ndash; 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； &ndash;&gt;
            <property name="ignoreQualifiersAtRuntime" value="false"/>
            &lt;!&ndash; 参考 javaModelGenerator 的 immutable 属性 &ndash;&gt;
            <property name="immutable" value="false"/>

            &lt;!&ndash; 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 &ndash;&gt;
            <property name="modelOnly" value="false"/>

            &lt;!&ndash; 参考 javaModelGenerator 的 rootClass 属性
            <property name="rootClass" value=""/>
            &ndash;&gt;

            &lt;!&ndash; 参考javaClientGenerator 的  rootInterface 属性
            <property name="rootInterface" value=""/>
            &ndash;&gt;

            &lt;!&ndash; 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate &ndash;&gt;
            <property name="useActualColumnNames" value="false"/>


            &lt;!&ndash; generatedKey用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
            Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
            DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
            DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
            Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
            HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
            Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
            MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
            SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
            SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
            JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
            <generatedKey column="" sqlStatement=""/>
            &ndash;&gt;

            &lt;!&ndash;
            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；

            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
            如果使用了columnOverride元素，该属性无效；

            <columnRenamingRule searchString="" replaceString=""/>
            &ndash;&gt;


            &lt;!&ndash; 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
            column:要重新设置的列名；
            注意，一个table元素中可以有多个columnOverride元素哈~
            &ndash;&gt;
            &lt;!&ndash;<columnOverride column="state" jdbcType="VARCHAR"
                            javaType="com.quhuhu.nirvana.core.statemachine.stay.StayState"
                            typeHandler="com.quhuhu.nirvana.core.dao.support.mybatis.handler.StayStateHandler">
            </columnOverride>

            <columnOverride column="certificate_type" jdbcType="VARCHAR"
                            javaType="com.quhuhu.nirvana.core.config.stay.CertificateType"
                            typeHandler="com.quhuhu.nirvana.core.dao.support.mybatis.handler.CertificateTypeHandler">
            </columnOverride>

            <columnOverride column="order_type" jdbcType="VARCHAR"
                            javaType="com.quhuhu.nirvana.core.config.order.OrderType"
                            typeHandler="com.quhuhu.nirvana.core.dao.support.mybatis.handler.OrderTypeHandler">
            </columnOverride>&ndash;&gt;


            &lt;!&ndash; ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
            column:指定要忽略的列的名字；
            delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false

            注意，一个table元素中可以有多个ignoreColumn元素
            <ignoreColumn column="deptId" delimitedColumnName=""/>
            &ndash;&gt;
        </table>-->
        <!--<table tableName="membership_growth">-->
        <!--</table>-->
        <!--<table tableName="membership_growth_log">-->
        <!--</table>-->
        <!--<table tableName="membership_hotel_level_set">-->
        <!--</table>-->
        <!--<table tableName="membership_info">-->
        <!--</table>-->
 <!--       <table tableName="membership_order">
        </table>-->
        <!--<table tableName="membership_score_log">-->
        <!--</table>-->
        <!--<table tableName="remaining_sum_log">-->
        <!--&lt;!&ndash;</table>&ndash;&gt;-->
        <!--<table tableName="asp_ctrip_mapping"/>-->
        <!--<table tableName="asp_hotel"/>-->
        <!--<table tableName="asp_pms"/>-->
        <!--<table tableName="asp_pms_route"/>-->
        <!--<table tableName="asp_rujia_hotel"/>-->
        <!--<table tableName="asp_statistics"/>-->
        <!--<table tableName="hotel_booking"/>-->
        <!--<table tableName="in_invoicebooking"/>-->
        <!--<table tableName="in_invoicebooking_log"/>-->
        <!--<table tableName="in_invoicebooking_rq_log"/>-->
        <!--<table tableName="in_invoicenotify_log"/>-->
        <!--<table tableName="in_invoicenotify_rq_log"/>-->
        <!--<table tableName="in_invoicesearch_log"/>-->
        <!--<table tableName="in_invoicesearch_rs_log"/>-->
        <!--<table tableName="in_invoicetranssearch_log"/>-->
        <!--<table tableName="in_invoicetransSearch_rs_log"/>-->
        <!--<table tableName="job_config"/>-->
        <!--<table tableName="map_hotel_build_info"/>-->
        <!--<table tableName="map_hotel_info"/>-->
        <!--<table tableName="map_hotel_mapping"/>-->
        <!--<table tableName="map_room_build_apdt"/>-->
        <!--<table tableName="map_room_build_con"/>-->
        <!--<table tableName="map_room_build_door"/>-->
        <!--<table tableName="map_room_build_floor"/>-->
        <!--<table tableName="map_room_build_room"/>-->
        <!--<table tableName="map_room_mapping"/>-->
        <!--<table tableName="sr_hotel_arrangeroom_log"/>-->
        <!--<table tableName="sr_hotel_room_info"/>-->
        <!--<table tableName="sr_hotel_room_restriction"/>-->
        <!--<table tableName="sr_publish_info"/>-->
        <!--<table tableName="sr_publishroom_log"/>-->
        <!--<table tableName="sr_publishroom_rs_log"/>-->
        <!--<table tableName="sr_roomstatus_log"/>-->
        <!--<table tableName="sr_roomstatus_rs_log"/>-->
        <!--<table tableName="sr_selectorder_log"/>-->
        <!--<table tableName="sr_selectorder_rs_log"/>-->
        <!--<table tableName="sr_selectresult_log"/>-->
        <!--<table tableName="sr_selectresult_rs_log"/>-->
        <!--<table tableName="sr_selectroom_info"/>-->
        <!--<table tableName="sr_selectroom_log"/>-->
        <!--<table tableName="sr_selectroom_rq_log"/>-->
        <!--<table tableName="uc_devicecontrol_log"/>-->
        <!--<table tableName="uc_devicecontrol_rq_log"/>-->
        <!--<table tableName="uc_deviceStatus_log"/>-->
        <!--<table tableName="uc_deviceStatus_rs_log"/>-->
        <!--<table tableName="uc_order_guest_info"/>-->
        <!--<table tableName="uc_order_info"/>-->
        <!--<table tableName="uc_roomalert_log"/>-->
        <!--<table tableName="uc_roomalert_statistics"/>-->
        <!--<table tableName="uc_roompower_log"/>-->
        <!--<table tableName="uc_userauth_log"/>-->
        <table tableName="plan_0000"/>



    </context>
</generatorConfiguration>